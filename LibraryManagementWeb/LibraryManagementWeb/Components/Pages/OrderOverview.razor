@page "/Orderoverview"
@inject IOrderBusiness OrderBusiness

@rendermode InteractiveServer

@using LibraryManagementWeb.Business.Interfaces
@using LibraryManagementWeb.Models
@using LibraryManagementWeb.Models.Models.Filters
@using Microsoft.AspNetCore.Authorization

@attribute [Authorize]

<style>
    .search-container {
        display: flex;
        flex-direction: column;
        margin-bottom: 20px;
        gap: 10px;
    }

    .search-controls {
        display: flex;
        align-items: center;
        gap: 10px;
        justify-content: space-between;
    }

    .search-controls-left {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .search-container select, .search-container input, .search-container button {
        padding: 8px;
        font-size: 14px;
    }

    .search-container input {
        width: 300px;
    }

    .pagination {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        gap: 10px;
    }

        .pagination button {
            padding: 8px 16px;
            font-size: 14px;
        }

    .card-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 16px;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        height: 200px;
        position: relative;
        cursor: pointer;
    }

        .card h3 {
            margin: 10px 0;
            font-size: 18px;
            white-space: normal;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 100%;
        }

        .card p {
            margin: 5px 0;
            font-size: 14px;
        }

    .modal {
        display: @(showModal ? "block" : "none");
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
        padding-top: 60px;
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 600px;
        border-radius: 8px;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .order-overview img {
        width: 50px;
        height: 75px;
        object-fit: cover;
        margin-right: 10px;
    }

    .order-overview li {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 10px;
    }
</style>

<PageTitle>Order Overview</PageTitle>

<h1>Order Overview</h1>

<div class="search-container">
    <div class="search-controls">
        <div class="search-controls-left">
            <label>Start Date:</label>
            <input type="date" @bind="filter.StartDate" />
            <label>End Date:</label>
            <input type="date" @bind="filter.EndDate" />
            <button @onclick="LoadOrders">Search</button>
        </div>
    </div>
</div>

@if (orders == null)
{
    <p>Loading...</p>
}
else if (!orders.Any())
{
    <p>No orders found.</p>
}
else
{
    <div class="card-container">
        @foreach (var order in orders)
        {
            <div class="card" @onclick="() => ShowOrderDetails(order)">
                <h3>Order ID: @order.Id</h3>
                <p><strong>Order Date:</strong> @order.OrderDate</p>
                <p><strong>Total Books:</strong> @order.OrderLines.Count</p>
            </div>
        }
    </div>

    <div class="pagination">
        <button @onclick="PreviousPage" disabled="@(!CanPreviousPage)">Previous</button>
        <span>Page @filter.PageNumber</span>
        <button @onclick="NextPage" disabled="@(!CanNextPage)">Next</button>
    </div>
}

<div class="modal">
    <div class="modal-content">
        <span class="close" @onclick="CloseOrderDetails">&times;</span>
        <h4>Order Details</h4>
        <ul class="order-overview">
            @if (selectedOrder != null)
            {
                @foreach (var orderLine in selectedOrder.OrderLines)
                {
                    <li>
                        <div>
                            <img src="@orderLine.Book.CoverImage" alt="Cover Image" />
                            @orderLine.Book.Title - Quantity: @orderLine.Quantity
                        </div>
                    </li>
                }
            }
        </ul>
    </div>
</div>

@code {
    private OrderFilter filter = new OrderFilter
        {
            StartDate = DateTime.Now.AddMonths(-1),
            EndDate = DateTime.Now
        };
    private List<Order> orders = new();
    private int totalOrders;
    private bool showModal = false;
    private Order selectedOrder;

    private async Task LoadOrders()
    {
        var result = await OrderBusiness.RetrieveOrders(filter);
        orders = result.ToList();
        totalOrders = orders.Count; // Assuming the total count is returned in the result
    }

    private async Task PreviousPage()
    {
        if (filter.PageNumber > 1)
        {
            filter.PageNumber--;
            await LoadOrders();
        }
    }

    private async Task NextPage()
    {
        if (filter.PageNumber * filter.PageSize < totalOrders)
        {
            filter.PageNumber++;
            await LoadOrders();
        }
    }

    private bool CanPreviousPage => filter.PageNumber > 1;
    private bool CanNextPage => filter.PageNumber * filter.PageSize < totalOrders;

    private void ShowOrderDetails(Order order)
    {
        selectedOrder = order;
        showModal = true;
    }

    private void CloseOrderDetails()
    {
        showModal = false;
        selectedOrder = null;
    }
}
