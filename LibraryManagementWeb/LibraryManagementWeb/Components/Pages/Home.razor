@page "/"

@using LibraryManagementWeb.Business.Interfaces
@using LibraryManagementWeb.Models
@using LibraryManagementWeb.Models.Filters
@using LibraryManagementWeb.Models.Models
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims

@rendermode InteractiveServer

@inject IBooksBusiness BooksBusiness
@inject IBorrowingBusiness BorrowingBusiness
@inject AuthenticationStateProvider AuthenticationStateProvider

<style>
    .search-container {
        display: flex;
        flex-direction: column;
        margin-bottom: 20px;
        gap: 10px;
    }

    .search-controls {
        display: flex;
        align-items: center;
        gap: 10px;
        justify-content: space-between;
    }

    .search-controls-left {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .search-container select, .search-container input, .search-container button {
        padding: 8px;
        font-size: 14px;
    }

    .search-container input {
        width: 300px;
    }

    .pagination {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        gap: 10px;
    }

        .pagination button {
            padding: 8px 16px;
            font-size: 14px;
        }

    .card-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 16px;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        height: 500px;
        position: relative;
    }

        .card img {
            width: 120px;
            height: 180px;
            object-fit: cover;
            border-radius: 4px;
        }

        .card h3 {
            margin: 10px 0;
            font-size: 18px;
            white-space: normal;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 100%;
        }

        .card p {
            margin: 5px 0;
            font-size: 14px;
        }

    .borrow-button {
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
        margin-top: 10px;
    }

    .popup {
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: white;
        padding: 20px;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        z-index: 1000;
    }

    .popup-overlay {
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 999;
    }
</style>

<PageTitle>Library Home</PageTitle>

<h1>Library Books</h1>

<p>Total Books Found: @totalBooks</p>

<div class="search-container">
    <div class="search-controls">
        <div class="search-controls-left">
            <input type="text" @bind="searchCriteria.Query" placeholder="Enter search query" />
            <select @bind="searchCriteria.PageSize">
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
            </select>
            <button @onclick="SearchBooks">Search</button>
        </div>
    </div>
</div>

@if (books != null && books.Any())
{
    <div class="card-container">
        @foreach (var book in books)
        {
            <div class="card">
                <img src="@book.CoverImage" alt="Cover Image" />
                <h3 title="@book.Title">@book.Title</h3>
                <p><strong>Authors:</strong> @string.Join(", ", book.Authors)</p>
                <p><strong>Published Date:</strong> @book.PublishedDate</p>
                <p><strong>Publisher:</strong> @book.Publisher</p>
                <p><strong>Language:</strong> @book.Language</p>
                <p><strong>Pages:</strong> @book.Pages</p>
                <p><strong>Edition:</strong> @book.Edition</p>
                <p><strong>Quantity:</strong> @book.Quantity</p>
                <button class="borrow-button" @onclick="() => BorrowBook(book.Id)">Borrow</button>
            </div>
        }
    </div>

    <div class="pagination">
        <button @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
        <button @onclick="NextPage" disabled="@(!CanGoToNextPage)">Next</button>
    </div>
}

@if (showPopup)
{
    <div class="popup-overlay" @onclick="ClosePopup"></div>
    <div class="popup">
        <p>@popupMessage</p>
        <button @onclick="ClosePopup">Close</button>
    </div>
}

@code {
    private BookSearchCriteria searchCriteria = new BookSearchCriteria { Page = 1, PageSize = 10 };
    private List<Book> books = new List<Book>();
    private int totalBooks;
    private string userName;
    private Guid userId;
    private bool showPopup = false;
    private string popupMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            userName = user.Identity.Name;
            userId = Guid.Parse(user.FindFirst(ClaimTypes.NameIdentifier)?.Value);
        }
        else
        {
            userName = "Guest";
            userId = Guid.Empty;
        }
    }

    private async Task SearchBooks()
    {
        var result = await BooksBusiness.GetBooksAsync(searchCriteria);
        books = result.Books.ToList();
        totalBooks = result.TotalBooks;
    }

    private async Task PreviousPage()
    {
        if (searchCriteria.Page > 1)
        {
            searchCriteria.Page--;
            await SearchBooks();
        }
    }

    private async Task NextPage()
    {
        if (searchCriteria.Page * searchCriteria.PageSize < totalBooks)
        {
            searchCriteria.Page++;
            await SearchBooks();
        }
    }

    private async Task BorrowBook(Guid? bookId)
    {
        if (bookId.HasValue && userId != Guid.Empty)
        {
            var borrowing = new Borrowing
                {
                    BookId = bookId,
                    UserId = userId,
                    //BorrowDate = DateTime.Now
                };

            try
            {
                Guid returnedId = await BorrowingBusiness.BorrowBookAsync(borrowing);

                if (returnedId == Guid.Empty)
                {
                    popupMessage = "Attempt at borrowing the book has failed.";
                    showPopup = true;
                }
                else
                {
                    // Updating the frontend
                    await SearchBooks();
                }
            }
            catch (Exception ex)
            {
                popupMessage = $"Error: The quantity of the chosen book is 0.";
                showPopup = true;
            }
        }
    }

    private void ClosePopup()
    {
        showPopup = false;
    }

    private bool CanGoToPreviousPage => searchCriteria.Page > 1;
    private bool CanGoToNextPage => searchCriteria.Page * searchCriteria.PageSize < totalBooks;
}
