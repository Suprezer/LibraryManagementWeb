@page "/orderbooks"

@using Microsoft.AspNetCore.Authorization
@using LibraryManagementWeb.Models
@using LibraryManagementWeb.Models.Filters
@using LibraryManagementWeb.Services

@rendermode InteractiveServer

@inject IISBNDBBooksService ISBNDBBooksService

@attribute [Authorize]

<style>
    .search-container {
        display: flex;
        flex-direction: column;
        margin-bottom: 20px;
        gap: 10px;
    }

    .search-controls {
        display: flex;
        align-items: center;
        gap: 10px;
        justify-content: space-between;
    }

    .search-controls-left {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .additional-filters {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .search-container select, .search-container input, .search-container button {
        padding: 8px;
        font-size: 14px;
    }

    .search-container input {
        width: 300px;
    }

    .additional-filters input[type="number"] {
        width: 150px;
    }

    .pagination {
        margin-top: 20px;
        display: flex;
        justify-content: center;
        gap: 10px;
    }

        .pagination button {
            padding: 8px 16px;
            font-size: 14px;
        }

    .card-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 20px;
        margin-top: 20px;
    }

    .card {
        border: 1px solid #ddd;
        border-radius: 8px;
        padding: 16px;
        background-color: #fff;
        box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        display: flex;
        flex-direction: column;
        align-items: center;
        text-align: center;
        height: 500px;
        position: relative;
    }

        .card img {
            width: 120px;
            height: 180px;
            object-fit: cover;
            border-radius: 4px;
        }

        .card h3 {
            margin: 10px 0;
            font-size: 18px;
            white-space: normal;
            overflow: hidden;
            text-overflow: ellipsis;
            max-width: 100%;
        }

        .card p {
            margin: 5px 0;
            font-size: 14px;
        }

    .order-button {
        padding: 10px 20px;
        font-size: 16px;
        cursor: pointer;
    }

    .quantity-container {
        display: flex;
        align-items: center;
        gap: 10px;
        margin-top: 10px;
    }

    .modal {
        display: @(showModal ? "block" : "none");
        position: fixed;
        z-index: 1;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgb(0,0,0);
        background-color: rgba(0,0,0,0.4);
        padding-top: 60px;
    }

    .modal-content {
        background-color: #fefefe;
        margin: 5% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 600px;
        border-radius: 8px;
    }

    .close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .close:hover,
        .close:focus {
            color: black;
            text-decoration: none;
            cursor: pointer;
        }

    .order-overview img {
        width: 50px;
        height: 75px;
        object-fit: cover;
        margin-right: 10px;
    }

    .order-overview li {
        display: flex;
        align-items: center;
        justify-content: space-between;
        margin-bottom: 10px;
    }

    .remove-button {
        background-color: transparent;
        border: none;
        color: red;
        cursor: pointer;
        font-size: 16px;
    }
</style>

<PageTitle>Order Books</PageTitle>

<h1>Order New Books</h1>

<p>Total Books Found: @totalBooks</p>

<div class="search-container">
    <div class="search-controls">
        <div class="search-controls-left">
            <select @bind="searchCriteria.Column">
                <option value="Title">Title</option>
                <option value="Author">Author</option>
                <option value="Published_Date">Date Published</option>
                <option value="Subjects">Subjects</option>
            </select>
            <input type="text" @bind="searchCriteria.Query" placeholder="Enter search query" />
            <select @bind="searchCriteria.PageSize">
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
            </select>
            <button @onclick="SearchBooks">Search</button>
        </div>
        <button class="order-button" @onclick="ShowOrderOverview">Order Selected Books</button>
    </div>
    <div class="additional-filters">
        <input type="number" @bind="searchCriteria.YearOfPublication" placeholder="Year of Publication" />
        <input type="number" @bind="searchCriteria.Edition" placeholder="Edition" />
        <select @bind="searchCriteria.Language">
            <option value="">Any Language</option>
            <option value="en">English</option>
            <option value="fr">French</option>
            <option value="da">Danish</option>
            <option value="zh">Chinese</option>
        </select>
    </div>
</div>

@if (books != null && books.Any())
{
    <div class="card-container">
        @foreach (var book in books)
        {
            <div class="card">
                <img src="@book.CoverImage" alt="Cover Image" />
                <h3 title="@book.Title">@book.Title</h3>
                <p><strong>Authors:</strong> @string.Join(", ", book.Authors)</p>
                <p><strong>Published Date:</strong> @book.PublishedDate</p>
                <p><strong>Publisher:</strong> @book.Publisher</p>
                <p><strong>Language:</strong> @book.Language</p>
                <p><strong>Pages:</strong> @book.Pages</p>
                <p><strong>Edition:</strong> @book.Edition</p>
                <div class="quantity-container">
                    <select @bind="book.Quantity">
                        @for (int i = 1; i <= 10; i++)
                        {
                            <option value="@i">@i</option>
                        }
                    </select>
                    <button class="order-button" @onclick="() => OrderBook(book)">Order</button>
                </div>
            </div>
        }
    </div>

    <div class="pagination">
        <button @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
        <button @onclick="NextPage" disabled="@(!CanGoToNextPage)">Next</button>
    </div>
}

<div class="modal" style="@(showModal ? "display:block;" : "display:none;")">
    <div class="modal-content">
        <span class="close" @onclick="CloseOrderOverview">&times;</span>
        <h4>Order Overview</h4>
        <ul class="order-overview">
            @foreach (var book in selectedBooks)
            {
                <li>
                    <div>
                        <img src="@book.CoverImage" alt="Cover Image" />
                        @book.Title - Quantity: @book.Quantity
                    </div>
                    <button class="remove-button" @onclick="() => RemoveBook(book)">Remove</button>
                </li>
            }
        </ul>
        <button class="order-button" @onclick="SendOrder">Confirm Order</button>
    </div>
</div>

@code {
    private BookSearchCriteria searchCriteria = new BookSearchCriteria { Page = 1, PageSize = 10 };
    private List<Book> books = new List<Book>();
    private List<Book> selectedBooks = new List<Book>();
    private int totalBooks;
    private bool showModal = false;

    private async Task SearchBooks()
    {
        var result = await ISBNDBBooksService.GetISBNDBBooksAsync(searchCriteria);
        books = result.Books.ToList();
        totalBooks = result.TotalBooks;
    }

    private async Task PreviousPage()
    {
        if (searchCriteria.Page > 1)
        {
            searchCriteria.Page--;
            await SearchBooks();
        }
    }

    private async Task NextPage()
    {
        if (searchCriteria.Page * searchCriteria.PageSize < totalBooks)
        {
            searchCriteria.Page++;
            await SearchBooks();
        }
    }

    private void OrderBook(Book book)
    {
        // Add the book to the selectedBooks list with the specified quantity
        selectedBooks.Add(book);
        Console.WriteLine($"Ordered {book.Quantity} copies of {book.Title}");
    }

    private void RemoveBook(Book book)
    {
        // Remove the book from the selectedBooks list
        selectedBooks.Remove(book);
        Console.WriteLine($"Removed {book.Title} from order");
    }

    private void ShowOrderOverview()
    {
        showModal = true;
    }

    private void CloseOrderOverview()
    {
        showModal = false;
    }

    private void SendOrder()
    {
        // Send selectedBooks to your API
        foreach (var book in selectedBooks)
        {
            Console.WriteLine($"Ordered {book.Quantity} copies of {book.Title}");
        }
        CloseOrderOverview();
    }

    private bool CanGoToPreviousPage => searchCriteria.Page > 1;
    private bool CanGoToNextPage => searchCriteria.Page * searchCriteria.PageSize < totalBooks;
}